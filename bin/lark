#!/usr/bin/env node --harmony

/**
 * Module dependencies.
 */
var program = require('commander');
var fs = require('fs');
var path = require('path');
var shell = require('shelljs');
var bootstrap = require('lark-bootstrap');

var pkg = require('../package.json');
var version = pkg.version;
var cp = shell.cp;
var cd = shell.cd;
var exec = shell.exec;
var error = shell.error;
var mkdir = shell.mkdir;
var seedPath = path.dirname(require.resolve('lark-seed'));

/**
 * set lark version
 */
program.version(version);

/**
 * option env
 */
program.option('-e, --env <env>');

/**
 * comman new
 */

program
    .command('new')
    .alias('n')
    .description('create an application base on lark framework')
    .usage('<app>')
    .action(createApp);
/**
 * comman run/server
 */

program
    .command('run')
    .alias('server')
    .alias('start')
    .description('run lark app with watch')
    .usage('<app>')
    .action(runApp);

/**
 * command restart
 */

program
    .command('restart')
    .description('restart app')
    .usage('<app>')
    .action(function(){
        var cmd = ' node --harmony index.js --lark-restart';
        exec(cmd, {async: false});
    });

/**
 * command reload
 */

program
    .command('reload')
    .description('reload app')
    .usage('<app>')
    .action(function(){
        var cmd = ' node --harmony index.js --lark-reload';
        exec(cmd, {async: false});
    });

/**
 * command stop
 */

program
    .command('stop')
    .description('stop app')
    .usage('<app>')
    .action(function(){
        var cmd = ' node --harmony index.js --lark-stop';
        exec(cmd, {async: false});
    });

/**
 * command generate
 */
program
    .command('generate')
    .alias('g')
    .description('code generator')
    .usage('[something]')
    .action(generateHelper);


/**
 * custom help
 */
program.on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ lark new lark-app');
    console.log('    $ lark run');
    console.log('    $ lark generate controller user/create.js');
    console.log('');
});

program.parse(process.argv);


/**
 * create app
 * @param app
 */
function createApp(app) {
    var cwd = process.cwd();
    var appPath = path.join(cwd, app);
    var seed = path.join(seedPath, 'seed/*');
    if (fs.existsSync(appPath)) {
        console.error('%s is not a empty directory', appPath);
    } else {
        cp('-rf', seed, appPath);
        cd(appPath);
        exec('npm install');
        var err = error();
        if (!err) {
            console.log('');
            console.log('');
            console.log('%s created success!', app);
            console.log('you can run lark app by: ');
            console.log('    $ cd %s', app);
            console.log('    $ lark run')
        }
    }
}

/**
 * run the app
 */
function runApp() {
    var cmd = '';
    if(program.env){
        cmd += 'NODE_ENV=' + program.env;
    }
    cmd += ' node --harmony index.js';
    exec(cmd, {async: false});
}

/**
 * generateController
 * @param directory {{string}}
 * useage
 * user/create.js
 * api
 * api/
 */
function generateController(directory) {
    if (!directory) {
        return;
    }
    if (!fs.existsSync('controllers')) {
        console.error('You need a controllers directory');
        return;
    }
    var cwd = process.cwd();
    var seed = path.join(seedPath, 'controller/index.js');
    var dirname = '';
    var filePath = '';
    var extname = path.extname(directory);
    if (extname && extname === '.js') {
        filePath = path.join(cwd, 'controllers', directory);
        dirname = path.join(cwd, 'controllers', path.dirname(directory));
    } else if (!extname) {
        filePath = path.join(cwd, 'controllers', directory, 'index.js');
        dirname = path.join(cwd, 'controllers', directory);
    }

    if (!fs.existsSync(dirname)) {
        mkdir('-p', dirname);
    }

    cp(seed, filePath);

    console.log(filePath,' created')
}
/**
 * generate PageService file
 * @param page  pageService file name
 */
function generatePageService(page){
    if (!page) {
        return;
    }
    if(path.extname(page) !== '.js'){
        page += '.js';
    }
    var cwd = process.cwd();
    var seed = path.join(seedPath, 'pageservice/index.js');
    var pageservice = path.join(cwd, 'models','pageServices');
    if (!fs.existsSync(pageservice)) {
        mkdir('-p', pageservice);
    }
    var filePath = path.join(pageservice, page);
    cp(seed, filePath);
    console.log(filePath,' created');
}
/**
 * generate DataService file
 * @param data dataService file name
 */
function generateDataService(data){
    if (!data) {
        return;
    }
    if(path.extname(data) !== '.js'){
        data += '.js';
    }

    var cwd = process.cwd();
    var seed = path.join(seedPath, 'dataservice/index.js');
    var dataservice = path.join(cwd, 'models','dataServices');
    if (!fs.existsSync(dataservice)) {
        mkdir('-p', dataservice);
    }
    var filePath = path.join(dataservice, data);
    cp(seed, filePath);
    console.log(filePath,' created')
}

/**
 *
 */
function generateHelper(){
    if(arguments.length !=3){
        return;
    }
    var generateType = arguments['0'];
    var arg = arguments['1'];
    switch (generateType){
        case 'controller':
            generateController(arg);
            break;
        case 'page':
            generatePageService(arg);
            break;
        case 'data':
            generateDataService(arg);
            break;
    }
}


//TODO: command test,benchmarkï¼Œdestory
//TODO: option -w,-f
