#!/usr/bin/env node

/**
 * Module dependencies.
 */
var program = require('commander');
var fs = require('fs');
var path = require('path');
var shell = require('shelljs');

var generator = require('../lib/generator');
var pkg = require('../package.json');
var version = pkg.version;
var exec = shell.exec;
var error = shell.error;
var which = shell.which;
var exit = shell.exit;

/**
 * set lark version
 */
program.version(version);

/**
 * option env
 */
program.option('-e, --env <env>');

/**
 * option port
 */
program.option('-p, --port <port>');

/**
 * comman new
 */

program
    .command('new')
    .alias('n')
    .description('create an application base on lark framework')
    .usage('<app>')
    .action(createApp);
/**
 * comman run/server
 */

/**
 * comman default-env
 */
program
    .command('default-env')
    .alias('de')
    .description('set default running environment for the app')
    .usage('[something]')
    .action(setDefaultEnv);

program
    .command('run')
    .alias('server')
    .alias('start')
    .description('run lark app with watch')
    .usage('<app>')
    .action(function () {
        execCmd();
    });

/**
 * command restart
 */

program
    .command('restart')
    .description('restart app')
    .usage('<app>')
    .action(function () {
        execCmd('--lark-restart');
    });

/**
 * command reload
 */

program
    .command('reload')
    .description('reload app')
    .usage('<app>')
    .action(function () {
        execCmd('--lark-reload');
    });

/**
 * command stop
 */

program
    .command('stop')
    .description('stop app')
    .usage('<app>')
    .action(function () {
        execCmd('--lark-stop');
    });

/**
 * command delete
 */

program
    .command('delete')
    .description('delete app')
    .usage('<app>')
    .action(function () {
        execCmd('--lark-delete');
    });


/**
 * command generate
 */
program
    .command('generate')
    .alias('g')
    .description('code generator')
    .usage('[something]')
    .action(generateHelper);

/**
 * command destroy
 */
program
    .command('destroy')
    .alias('d')
    .description('code destroy')
    .usage('[something]')
    .action(destroyHelper);

/**
 * custom help
 */
program.on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ lark new lark-app');
    console.log('    $ lark run');
    console.log('    $ lark generate controller user/create.js');
    console.log('');
});

program
    .command('benchmark')
    .alias('b')
    .description('benchmark test (you need installed wrk)')
    .action(benchmarkHelper);

program.parse(process.argv);

/**
 * default output
 */

if (!process.argv.slice(2).length) {
    program.outputHelp();
}

/**
 * create app
 * @param app
 */
function createApp(app) {
    if (!app) {
        return;
    }
    generator('lark ' + app);
}

function setDefaultEnv(env){
    if(typeof env != 'string') env = null;
    return defaultEnv(env, true);
};

function defaultEnv(env, display){ 
    if(env == 'dev')  env = 'development';
    if(env == 'prod') env = 'production';
    if(env && env != 'development' && env != 'production' && env != 'clear'){
        console.error('Invalid env <%s>');
        console.error('    Available candiddates : development production');
        return;
    }

    if(!fs.existsSync('.lark-env')) exec('touch .lark-env');
    if(env){
        fs.writeFileSync('.lark-env',env);
        display && console.log('Default running environment is set to ' + env);
        return env;
    }
    else{
        env = fs.readFileSync('.lark-env');
        if(!env || (env != 'development' && env != 'production')){
            display && console.log('Default running environment is not set yet');
            return;
        }
        else{
            display && console.log('Default running environment is ' + env);
            return env;
        }
    }
}


/**
 * init cmd
 */
function execCmd(_cmd, config) {
    _cmd = _cmd || '';
    var cmd = '';
    if (program.env) {
        cmd += 'NODE_ENV=' + program.env;
    }
    else if(defaultEnv()){
        cmd += 'NODE_ENV=' + defaultEnv();
    }
    cmd += ' ' + process.execPath + ' ' + process.execArgv.join(" ") + ' index.js ' + _cmd;
    exec(cmd, {async: false});
}

/**
 * generateController
 * @param directory {{string}}
 * useage
 * user/create.js
 * api
 * api/
 */
function generateController(directory) {
    if (!directory) {
        return;
    }
    var filePath = '';
    var extname = path.extname(directory);
    if (extname && extname === '.js') {
        filePath = path.join(cwd, 'controllers', directory);
    } else if (!extname) {
        filePath = path.join(cwd, 'controllers', directory, 'index.js');
    }
    generator('lark:controller ' + filePath)
}
/**
 * generate PageService file
 * @param page  pageService file name
 */
function generatePageService(page) {
    if (!page) {
        return;
    }
    if (path.extname(page) !== '.js') {
        page += '.js';
    }
    generator('lark:page ' + page);
}
/**
 * generate DataService file
 * @param data dataService file name
 */
function generateDataService(data) {
    if (!data) {
        return;
    }
    if (path.extname(data) !== '.js') {
        data += '.js';
    }
    generator('lark:data ' + data);
}

/**
 * generate dao file
 * @param dao  file name
 */
function generateDaoService(dao) {
    if (!dao) {
        return;
    }
    if (path.extname(dao) !== '.js') {
        dao += '.js';
    }
    generator('lark:dao ' + dao);
}

/**
 * generate dao file
 * @param dao  file name
 */
function generateBenchmark() {
    generator('lark:benchmark');
}

/**
 * generateHelper
 */
function generateHelper() {
    if (arguments['0'] != 'benchmark' && arguments.length != 3 ) {
        console.log('Usage: lark g/generate [type] [name]');
        return;
    }
    var generateType = arguments['0'];
    var arg = arguments['1'];
    switch (generateType) {
        case 'controller':
        case 'route':
            generateController(arg);
            break;
        case 'page':
            generatePageService(arg);
            break;
        case 'data':
            generateDataService(arg);
            break;
        case 'dao':
            generateDaoService(arg);
            break;
        case 'benchmark':
            generateBenchmark();
            break;
    }
}

/**
 * delete models
 */
function destroyHelper() {
    if (arguments.length != 3) {
        console.log('Usage: lark d/destroy [type] [name]')
        return;
    }
    var generateType = arguments['0'];
    var directory = path.dirname(darguments['1']);
    var cwd = process.cwd();
    var dirname = "";
    switch (generateType) {
        case 'controller':
            dirname = path.join(cwd, 'controllers', directory);
            break;
        case 'page':
            dirname = path.join(cwd, 'models', 'pageServices', directory);
            break;
        case 'data':
            dirname = path.join(cwd, 'models', 'dataServices', directory);
            break;
            shell.rm('-rf', dirname);
            console.log(dirname, ' destoryed.')
    }
}


function benchmarkHelper() {
    var port = program.port || 3000;
    if (!which('wrk')) {
        console.log('You need install wrk before use lark benchmark');
        exit(1);
    }
    if (!fs.existsSync('benchmarks/run.sh')) {
        console.log('You need benchmarks/run.sh ');
        exit(1);
    }
    console.log('wrk will test with port:%s', port);
    exec('sh benchmarks/run.sh index.js ' + port)
}

//TODO: command test,benchmarkï¼Œdestory
//TODO: option -w,-f
